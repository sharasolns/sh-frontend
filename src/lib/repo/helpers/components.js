exports.components = [{"fileName":"CkEditor.vue","contents":"<script setup>\n//\nimport {onMounted} from 'vue'\n\nconst props = defineProps(['fillSelects','modelValue'])\nconst emit = defineEmits(['update:modelValue'])\nonMounted(()=>{\n  createEditor()\n})\nfunction createEditor(){\nwindow.ClassicEditor\n    .create( document.querySelector( '#editor' ) )\n    .catch( error => {\n      console.error( error );\n    } );\n}\n</script>\n<template>\n  <div id=\"editor\"></div>\n</template>\n\n<style scoped>\n\n</style>\n"},{"fileName":"EmailInput.vue","contents":"<script setup>\nimport { onMounted, ref } from 'vue'\n\nconst props = defineProps(['modelValue','label'])\nconst emit = defineEmits(['update:modelValue','clearValidationErrors'])\nconst inputModel = ref(null)\n\nconst modelValueUpdated = (e) => {\n  emit('clearValidationErrors')\n  emit('update:modelValue',inputModel)\n}\nonMounted(()=>{\n  props.modelValue && (inputModel.value = props.modelValue)\n})\n\n</script>\n\n<template>\n  <input type=\"email\" v-model=\"inputModel\" @change=\"modelValueUpdated\" @keydown=\"modelValueUpdated\" @updated=\"modelValueUpdated\">\n</template>"},{"fileName":"NumberInput.vue","contents":"<script setup>\nimport { onMounted, ref } from 'vue'\n\nconst props = defineProps(['modelValue','label','min','max'])\nconst emit = defineEmits(['update:modelValue','clearValidationErrors'])\nconst inputModel = ref(null)\n\nconst modelValueUpdated = (e) => {\n  emit('clearValidationErrors')\n  emit('update:modelValue',inputModel)\n}\nonMounted(()=>{\n  props.modelValue && (inputModel.value = props.modelValue)\n})\n\n</script>\n\n<template>\n  <input :min=\"min\" :max=\"max\" type=\"number\" v-model=\"inputModel\" @change=\"modelValueUpdated\" @keydown=\"modelValueUpdated\" @updated=\"modelValueUpdated\">\n</template>"},{"fileName":"PasswordInput.vue","contents":"<script setup>\nimport { onMounted, ref } from 'vue'\n\nconst props = defineProps(['modelValue','label'])\nconst emit = defineEmits(['update:modelValue','clearValidationErrors'])\nconst inputModel = ref(null)\n\nconst modelValueUpdated = (e) => {\n  emit('clearValidationErrors')\n  emit('update:modelValue',inputModel)\n}\nonMounted(()=>{\n  props.modelValue && (inputModel.value = props.modelValue)\n})\n\n</script>\n\n<template>\n  <input type=\"password\" v-model=\"inputModel\" @change=\"modelValueUpdated\" @keydown=\"modelValueUpdated\" @updated=\"modelValueUpdated\">\n</template>"},{"fileName":"PhoneInput.vue","contents":"<template>\n    <div class=\"sh-phone mb-3\">\n      <div v-if=\"selectedCountry\" style=\"display: contents;\">\n        <img :src=\"flag\">\n        {{ selectedCountry.dialCode }}\n      </div>\n      <select @change=\"updateValue\" v-model=\"selectedCountry\" class=\"phone-country\">\n        <option v-for=\"country in countries\" :value=\"country\" :key=\"country.dialCode\">{{ country.name + '(' + country.dialCode + ')' }}</option>\n      </select>\n      <input type=\"text\" class=\"phone-number\" data-cy=\"phone_input\" @input=\"updateValue\" placeholder=\"712345678\" v-model=\"input\">\n    </div>\n</template>\n\n<script>\nimport { countries } from '@iankibetsh/shframework'\nexport default {\n  name: 'PhoneInput',\n  props: ['modelValue', 'country_code'],\n  data () {\n    return {\n      input: this.modelValue,\n      countries: countries,\n      selectedCountry: {\n        name: 'Kenya',\n        dialCode: '+254',\n        isoCode: 'KE',\n        flag: 'https://www.countryflags.io/KE/flat/64.png'\n      },\n      flag: import.meta.env.VITE_APP_HOME_URL + 'flags/ke.svg',\n      appUrl: import.meta.env.VITE_APP_HOME_URL\n    }\n  },\n  updated () {\n    if (!this.selectedCountry || !this.input) {\n      // this.setSelectedCountry()\n    }\n  },\n  mounted () {\n    this.setSelectedCountry()\n  },\n  methods: {\n    updateValue: function () {\n      let phone = this.input\n      phone = '-' + phone\n      phone = phone.replace('-0', '')\n      phone = phone.replace('-', '')\n      // this.input = phone\n      if (this.selectedCountry) {\n        phone = this.selectedCountry.dialCode + '' + phone\n      }\n      this.$emit('update:modelValue', phone)\n      this.flag = this.appUrl + 'flags/' + this.selectedCountry.isoCode.toLowerCase() + '.svg'\n    },\n    setSelectedCountry: function () {\n      let countryCode = 'KE'\n      if (this.country_code) {\n        countryCode = this.country_code\n      }\n      this.input = this.modelValue\n      const country = this.countries.find(function (country) {\n        if (countryCode.toUpperCase() === country.isoCode) {\n          return country\n        }\n      }, this)\n      if (this.input) {\n        if (!this.input.includes('+')) {\n          this.input = '+' + this.input\n        }\n        this.flag = this.appUrl + 'flags/' + country.isoCode.toLowerCase() + '.svg'\n        this.input = this.input.replace(country.dialCode, '')\n        this.input = this.input.replace(':', '')\n        this.input = this.input.replace(':', '')\n        this.input = this.input.replace(':', '')\n        this.selectedCountry = country\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.sh-phone{\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding: 0 0.25rem;\n}\n.phone-country{\n  width: 2rem;\n  border: none;\n  align-self: center;\n  outline: none !important;\n  padding: 0.4rem;\n  border-right: 1px solid #0003;\n}\n.phone-number{\n  width: calc(100% - 2.2rem);\n  border: none;\n  align-self: center;\n  outline: none;\n  margin-bottom: 0;\n  padding: 0.4rem;\n}\n.sh-phone img{\n  padding: 0.125rem;\n  width: 2rem;\n  height: 2rem;\n}\n.phone-number::placeholder{\n  font-weight: 300;\n  opacity: 0.5;\n}\n</style>\n"},{"fileName":"SearchInput.vue","contents":"<script setup>\nimport {onMounted, ref} from 'vue'\nimport ShApis from '../../repo/helpers/ShApis.js'\n\nconst props = defineProps(['url','modelValue','allowMultiple'])\nconst emit = defineEmits(['update:modelValue'])\nlet id = ref(null)\nlet filterValue = ref(null)\nlet suggestions = ref(null)\nlet selectedSuggestions = ref([])\nonMounted(() => {\n  id.value = 'sid' + (Math.random() + 1).toString(36).substring(7)\n})\n\nfunction addSuggestion(sgn){\n  let selected = selectedSuggestions.value\n  if(selected.length > 0 && !props.allowMultiple){\n    // alert('here')\n    selected = []\n  }\n  if(!selected.includes(sgn)){\n    selected.push(sgn)\n    selectedSuggestions.value = selected\n  }\n  updateModelValue()\n  document.getElementById('input_' + id.value).innerHTML = ''\n}\nfunction updateModelValue(){\n  let selectedItems = selectedSuggestions.value\n  if(selectedItems.length === 0) {\n    emit('update:modelValue', null)\n  }  else if (!props.allowMultiple) {\n    emit('update:modelValue', selectedItems[0].id)\n  } else {\n    const ids = selectedItems.map(item => {\n      return item.id\n    })\n    emit('update:modelValue', ids)\n  }\n}\nfunction removeSuggestion(sgt){\n  selectedSuggestions.value  = selectedSuggestions.value.filter(selectedSgt=>{\n    if(selectedSgt.id !== sgt) {\n      return selectedSgt\n    }\n  })\n  updateModelValue()\n}\nlet searchText = ref(null)\nfunction filterData(e){\n  let dropdownElem = document.getElementById('dropdown_section' + id.value)\n  if(!dropdownElem.classList.contains('show')){\n    dropdownElem.classList.add('show')\n  }\n  let filterValue = e.target.innerText\n  searchText.value = filterValue\n  ShApis.doGet(props.url, { all: 1,filter_value: filterValue }).then(res => {\n    console.log(res.data.data)\n    if(res.data.data){\n      suggestions.value = res.data.data\n    } else {\n      suggestions.value = res.data\n    }\n  }).catch(res => {\n    console.log(res)\n  })\n}\n</script>\n<template>\n  <div class=\"dropdown sh-suggest\" v-if=\"id\">\n    <div :id=\"id\" data-bs-toggle=\"dropdown\" class=\"form-control p-0 d-flex sh-suggest-control dropdown-toggle\" aria-expanded=\"false\">\n      <div>\n        <h5 class=\"badge bg-secondary m-1 sh-selected-item\" v-for=\"sgt in selectedSuggestions\">\n          {{ sgt.name }}\n          <button @click=\"removeSuggestion(sgt.id)\" type=\"button\" class=\"btn-close border-start border-1 ms-1\" aria-label=\"Close\"></button>\n        </h5>\n      </div>\n      <div :id=\"'input_' + id\" contenteditable=\"true\" @click=\"filterData\" @input=\"filterData\" class=\"flex-fill h-100 sh-suggestion-input\"></div>\n    </div>\n    <ul class=\"dropdown-menu w-100\" :id=\"'dropdown_section' + id\" :aria-labelledby=\"id\">\n      <template v-if=\"suggestions && suggestions.length > 0\" v-for=\"suggestion in suggestions\" :key=\"suggestion.id\">\n        <li v-if=\"suggestion.name\">\n          <a @click=\"addSuggestion(suggestion)\" class=\"dropdown-item\" :class=\"selectedSuggestions.includes(suggestion) ? 'active':''\" href=\"#\">{{ suggestion.name ?? suggestion.text }}</a>\n        </li>\n      </template>\n      <li v-else-if=\"searchText\" class=\"dropdown-item sh-suggest-no-results\">\n        No results found\n      </li>\n      <li v-else class=\"dropdown-item sh-suggest-no-input\">\n        Type to search...\n      </li>\n    </ul>\n  </div>\n</template>\n<style type=\"text/css\" scoped>\n.sh-selected-item{\n  line-height: unset!important;\n}\n.sh-suggestion-input{\n  padding: 0.375rem 0.75rem;\n}\n.sh-suggest{\n  margin-bottom: 1rem;\n}\n.sh-suggest-control::after{\n  margin-top: auto;\n  margin-bottom: auto;\n  margin-right: 0.255em;\n}\n</style>\n"},{"fileName":"SelectInput.vue","contents":"<script setup>\nimport { onMounted, ref } from 'vue'\nimport { shApis } from '@iankibetsh/shframework'\n\nconst props = defineProps(['modelValue','label','data','dataUrl'])\nconst emit = defineEmits(['update:modelValue','clearValidationErrors'])\nconst inputModel = ref(null)\nconst selectOptions = ref(null)\nconst modelValueUpdated = (e) => {\n  emit('clearValidationErrors')\n  emit('update:modelValue',inputModel)\n}\nonMounted(()=>{\n  props.modelValue && (inputModel.value = props.modelValue)\n  if(props.data){\n    selectOptions.value = props.data.map(item=>{\n      return {\n        id: item.id ? item.id : item.key ? item.key : item.value ? item.value:item.name ? item.name:item.label,\n        name: item.label ? item.label : item.name ? item.name : item.value ? item.value:item.id ? item.id:item.option\n      }\n    })\n  } else if (props.dataUrl){\n    shApis.doGet(props.dataUrl,{all:1}).then(res=>{\n      selectOptions.value = res.data.map(item=>{\n        return {\n          id: item.id ? item.id : item.key ? item.key : item.value ? item.value:item.name ? item.name:item.label,\n          name: item.label ? item.label : item.name ? item.name : item.value ? item.value:item.id ? item.id:item.option\n        }\n      })\n    }).catch(ex=>{\n      console.log(ex)\n    })\n  }\n})\n\n</script>\n\n<template>\n  <select v-model=\"inputModel\" @change=\"modelValueUpdated\" @keydown=\"modelValueUpdated\" @updated=\"modelValueUpdated\">\n    <template v-for=\"option in selectOptions\" :key=\"option.id\">\n      <option :value=\"option.id\">{{ option.name }}</option>\n    </template>\n  </select>\n</template>"},{"fileName":"ShEditor.vue","contents":"<template>\n  <textarea id=\"tiny\" style=\"display: none;\" data-cy=\"tinymce_editor\"></textarea>\n  <div @focusin.stop class=\"sh-editor w-100\">\n    <editor class=\"tinyEditor\"\n            api-key=\"v5otxmculqf59xfg2bqr2ucw56cbqgbqo4x9gym2kwbv1rvi\"\n            @input=\"updateValue\"\n            @keyup=\"updateValue\"\n            v-model=\"value\"\n            :init=\"{\n      selector: 'textarea#tiny',\n      valid_children : '+body[style],+body[script]',\n      extended_valid_elements : '*[*]',\n      contextmenu: false,\n      plugins: 'lists link image emoticons code autolink',\n      toolbar: 'styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist | link image emoticons code'\n    }\"\n    />\n  </div>\n</template>\n<script>\nimport Editor from '@tinymce/tinymce-vue'\n\nexport default {\n  name: 'ShEditor',\n  props: ['modelValue'],\n  components: {\n    editor: Editor\n  },\n  data () {\n    return {\n      editorData: this.modelValue\n    }\n  },\n  computed: {\n    value: {\n      get () {\n        return this.modelValue\n      },\n      set (value) {\n        this.$emit('update:modelValue', value)\n      }\n    }\n  },\n  created () {\n    document.addEventListener('focusin', function (e) {\n      const closest = e.target.closest('.tox-tinymce-aux, .tox-dialog, .moxman-window, .tam-assetmanager-root')\n      if (closest !== null && closest !== undefined) {\n        e.stopImmediatePropagation()\n      }\n    })\n  },\n  mounted () {\n    this.editorData = this.modelValue\n  },\n  methods: {\n    updateValue: function () {\n      // alert('paste')\n    }\n  }\n}\n</script>\n\n<style>\n:root {\n  --ck-z-default: 10555 !important;\n  --ck-z-modal: calc(var(--ck-z-default) + 999) !important;\n}\n.mceToolbar td {\n  display:table-row;\n  float: left;\n}\n.mceToolbar td:nth-of-type(11){\n  clear: left;\n}\n\n@media screen and (max-width:600px) {\n  .sh-editor{\n    width: 100% !important;\n  }\n  table.mceLayout, textarea.tinyMCE {\n    width: 100% !important;\n  }\n}\n</style>\n"},{"fileName":"ShSuggest.vue","contents":"<script setup>\nimport {onMounted, ref} from 'vue'\nimport ShApis from '../../repo/helpers/ShApis.js'\n\nconst props = defineProps(['fillSelects','modelValue'])\nconst emit = defineEmits(['update:modelValue'])\nlet id = ref(null)\nlet filterValue = ref(null)\nlet suggestions = ref(null)\nlet selectedSuggestions = ref([])\nonMounted(() => {\n  id.value = 'sid' + (Math.random() + 1).toString(36).substring(7)\n  resetData()\n})\nfunction resetData(){\n  if(props.fillSelects.data) {\n    suggestions.value = props.fillSelects.data\n  }\n}\nfunction addSuggestion(sgn){\n  let selected = selectedSuggestions.value\n  if(selected.length > 0 && !props.fillSelects.allowMultiple){\n    selected = []\n  }\n  if(!selected.includes(sgn)){\n    selected.push(sgn)\n    selectedSuggestions.value = selected\n  }\n  updateModelValue()\n  document.getElementById('input_' + id.value).innerHTML = ''\n}\nfunction updateModelValue(){\n  let selectedItems = selectedSuggestions.value\n  if(selectedItems.length === 0) {\n    emit('update:modelValue', null)\n  }  else if (!props.fillSelects.allowMultiple) {\n    emit('update:modelValue', selectedItems[0].id)\n  } else {\n    const ids = selectedItems.map(item => {\n      return item.id\n    })\n    emit('update:modelValue', ids)\n  }\n}\nfunction removeSuggestion(sgt){\n  selectedSuggestions.value  = selectedSuggestions.value.filter(selectedSgt=>{\n    if(selectedSgt.id !== sgt) {\n      return selectedSgt\n    }\n  })\n  updateModelValue()\n}\nlet searchText = ref(null)\nfunction filterData(e){\n  let dropdownElem = document.getElementById('dropwdown_section' + id.value)\n  if(!dropdownElem.classList.contains('show')){\n    dropdownElem.classList.add('show')\n  }\n  let filterValue = e.target.innerText\n  searchText.value = filterValue\n  if(props.fillSelects.data) {\n    suggestions.value = props.fillSelects.data.filter(item=>{\n      if(item.name.toLowerCase().includes(filterValue.toLowerCase())){\n        return item\n      }\n    })\n  } else {\n    ShApis.doGet(props.fillSelects.url, { all: 1,filter_value: filterValue }).then(res => {\n      suggestions.value = res.data.data\n    }).catch(res => {\n      console.log(res)\n    })\n  }\n}\n</script>\n<template>\n  <div class=\"dropdown sh-suggest\" v-if=\"id\">\n    <div :id=\"id\" data-bs-toggle=\"dropdown\" class=\"form-control p-0 d-flex sh-suggest-control dropdown-toggle\" aria-expanded=\"false\">\n      <div>\n        <h5 class=\"badge bg-secondary m-1 sh-selected-item\" v-for=\"sgt in selectedSuggestions\">\n          {{ sgt.name }}\n          <button @click=\"removeSuggestion(sgt.id)\" type=\"button\" class=\"btn-close border-start border-1 ms-1\" aria-label=\"Close\"></button>\n        </h5>\n      </div>\n      <div :id=\"'input_' + id\" contenteditable=\"true\" @click=\"filterData\" @input=\"filterData\" class=\"flex-fill h-100 sh-suggestion-input\"></div>\n    </div>\n    <ul class=\"dropdown-menu w-100\" :id=\"'dropwdown_section' + id\" :aria-labelledby=\"id\">\n      <template v-if=\"suggestions && suggestions.length > 0\" v-for=\"suggestion in suggestions\" :key=\"suggestion.id\">\n        <li v-if=\"suggestion.name\">\n          <a @click=\"addSuggestion(suggestion)\" class=\"dropdown-item\" :class=\"selectedSuggestions.includes(suggestion) ? 'active':''\" href=\"#\">{{ suggestion.name ?? suggestion.text }}</a>\n        </li>\n      </template>\n      <li v-else-if=\"searchText\" class=\"dropdown-item sh-suggest-no-results\">\n        No results found\n      </li>\n      <li v-else class=\"dropdown-item sh-suggest-no-input\">\n        Type to search...\n      </li>\n    </ul>\n  </div>\n</template>\n<style type=\"text/css\" scoped>\n.sh-selected-item{\n  line-height: unset!important;\n}\n.sh-suggestion-input{\n  padding: 0.375rem 0.75rem;\n}\n.sh-suggest{\n  margin-bottom: 1rem;\n}\n.sh-suggest-control::after{\n  margin-top: auto;\n  margin-bottom: auto;\n  margin-right: 0.255em;\n}\n</style>\n"},{"fileName":"TextAreaInput.vue","contents":"<script setup>\nimport { onMounted, ref } from 'vue'\n\nconst props = defineProps(['modelValue','label'])\nconst emit = defineEmits(['update:modelValue','clearValidationErrors'])\nconst inputModel = ref(null)\n\nconst modelValueUpdated = (e) => {\n  emit('clearValidationErrors')\n  emit('update:modelValue',inputModel)\n}\nonMounted(()=>{\n  props.modelValue && (inputModel.value = props.modelValue)\n})\n\n</script>\n\n<template>\n  <textarea type=\"text\" v-model=\"inputModel\" @change=\"modelValueUpdated\" @keydown=\"modelValueUpdated\" @updated=\"modelValueUpdated\"></textarea>\n</template>"},{"fileName":"TextInput.vue","contents":"<script setup>\nimport { onMounted, ref } from 'vue'\n\nconst props = defineProps(['modelValue','label','isInvalid'])\nconst emit = defineEmits(['update:modelValue','clearValidationErrors'])\nconst inputModel = ref(null)\n\nconst modelValueUpdated = (e) => {\n  emit('clearValidationErrors')\n  emit('update:modelValue',inputModel)\n}\nonMounted(()=>{\n  props.modelValue && (inputModel.value = props.modelValue)\n})\n\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"inputModel\" @change=\"modelValueUpdated\" @keydown=\"modelValueUpdated\" @updated=\"modelValueUpdated\">\n</template>"}]